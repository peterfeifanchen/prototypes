Lockfree
====================================================================================
Lock-free programming is any multi-threaded program where any one thread cannot 
block the progress of another. 

Notes
====================================================================================
Things to be aware of when programming lock-free:
(1) atomicity of operation (e.g, aligned reads/writes)
(2) multi-writer?
		YES: be very aware of ABA problems
(3) multi-core arch have sequential consistency?
	  YES: C++11 atomics
	  NO: C++11 atomics with memory barriers
(4) Read-Modify-Write and Compare-And-Swap operations?
		YES: be very aware of ABA problem 
		NO: it may not be possible to implement lock-free efficiently (livelock)

References
====================================================================================
1. https://preshing.com/20120612/an-introduction-to-lock-free-programming/
2. https://preshing.com/20120515/memory-reordering-caught-in-the-act/
3. https://preshing.com/20121019/this-is-why-they-call-it-a-weakly-ordered-cpu/
4. https://preshing.com/20130823/the-synchronizes-with-relation/
5. https://preshing.com/20131125/acquire-and-release-fences-dont-work-the-way-youd-expect/
